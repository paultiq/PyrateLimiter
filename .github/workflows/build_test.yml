name: Python package

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  LATEST_PY_VERSION: '3.13'
  REDIS: 'redis://localhost:6379'

jobs:
  check:
    runs-on: ubuntu-latest
    services:
      pyrate_redis:
        image: bitnami/redis:latest
        env:
          ALLOW_EMPTY_PASSWORD: yes
        ports:
          - 6379:6379
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      pyrate_postgres:
        image: bitnami/postgresql
        env:
          ALLOW_EMPTY_PASSWORD: yes
          POSTGRESQL_PASSWORD: postgres
          POSTGRESQL_MAX_CONNECTIONS: 1000
        ports:
          - 5432:5432
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.8", "3.13"]

    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: uv sync --all-groups

    # Run linting (latest python version only)
    - name: Lint
      if: ${{ matrix.python-version == env.LATEST_PY_VERSION }}
      run: |
        uv run nox -e lint
    # Run tests and coverage report (all python versions)
    - name: Test and Coverage
      run: |
        uv run nox -e cover

    # Latest python version: send coverage report to codecov
    - name: "Upload coverage report to Codecov"
      if: ${{ matrix.python-version == env.LATEST_PY_VERSION }}
      uses: codecov/codecov-action@v2


  publish:

    needs: check
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ env.LATEST_PY_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.LATEST_PY_VERSION }}
    - uses: snok/install-poetry@v1.4.1
      with:
        virtualenvs-in-project: true
        version: 1.8.5
    - name: Install dependencies
      run: poetry install -v -E all
    - name: Publish
      run: |
        poetry config http-basic.pypi ${{ secrets.PYPI_USERNAME }} ${{ secrets.PYPI_PASSWORD }}
        poetry build
        poetry publish
